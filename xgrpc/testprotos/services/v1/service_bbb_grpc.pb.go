// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: service_bbb.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BBBService_MethodB_FullMethodName = "/services.BBBService/MethodB"
)

// BBBServiceClient is the client API for BBBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BBBServiceClient interface {
	MethodB(ctx context.Context, in *MethodBRequest, opts ...grpc.CallOption) (*MethodBReply, error)
}

type bBBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBBBServiceClient(cc grpc.ClientConnInterface) BBBServiceClient {
	return &bBBServiceClient{cc}
}

func (c *bBBServiceClient) MethodB(ctx context.Context, in *MethodBRequest, opts ...grpc.CallOption) (*MethodBReply, error) {
	out := new(MethodBReply)
	err := c.cc.Invoke(ctx, BBBService_MethodB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BBBServiceServer is the server API for BBBService service.
// All implementations must embed UnimplementedBBBServiceServer
// for forward compatibility
type BBBServiceServer interface {
	MethodB(context.Context, *MethodBRequest) (*MethodBReply, error)
	mustEmbedUnimplementedBBBServiceServer()
}

// UnimplementedBBBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBBBServiceServer struct {
}

func (UnimplementedBBBServiceServer) MethodB(context.Context, *MethodBRequest) (*MethodBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodB not implemented")
}
func (UnimplementedBBBServiceServer) mustEmbedUnimplementedBBBServiceServer() {}

// UnsafeBBBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BBBServiceServer will
// result in compilation errors.
type UnsafeBBBServiceServer interface {
	mustEmbedUnimplementedBBBServiceServer()
}

func RegisterBBBServiceServer(s grpc.ServiceRegistrar, srv BBBServiceServer) {
	s.RegisterService(&BBBService_ServiceDesc, srv)
}

func _BBBService_MethodB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBBServiceServer).MethodB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BBBService_MethodB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBBServiceServer).MethodB(ctx, req.(*MethodBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BBBService_ServiceDesc is the grpc.ServiceDesc for BBBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BBBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.BBBService",
	HandlerType: (*BBBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MethodB",
			Handler:    _BBBService_MethodB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_bbb.proto",
}
